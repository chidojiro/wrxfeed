{"version":3,"file":"src_support_SupportPage_tsx.bundle.js","mappings":"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","sources":["webpack://gravity-web/./src/company/apis.ts","webpack://gravity-web/./src/support/SupportPage.tsx","webpack://gravity-web/./node_modules/@heroicons/react/outline/esm/ClipboardCopyIcon.js"],"sourcesContent":["import { RestApis } from '@/rest/apis';\n\nconst create = (payload: any) => RestApis.post('/user/companies', payload);\n\nexport const CompanyApis = { create };\n","import { AuthApis } from '@/auth/apis';\nimport { Button, Divider, Form, Input, Tooltip } from '@/common/components';\nimport { useDisclosure, useHandler } from '@/common/hooks';\nimport { CompanyApis } from '@/company/apis';\nimport { useInvite } from '@/main/hooks';\nimport { useClipboard } from '@dwarvesf/react-hooks';\nimport { ClipboardCopyIcon } from '@heroicons/react/outline';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { toast } from 'react-toastify';\n\nexport type SupportPageProps = {\n  //\n};\n\nexport const SupportPage = ({}: SupportPageProps) => {\n  const { sendInvitation, isSent, inviteLink } = useInvite();\n  const [isLoading, setLoading] = useState(false);\n  const [email, setEmail] = useState('');\n  const [inviteEmail, setInviteEmail] = useState<string>('');\n  const methods = useForm({ mode: 'onChange' });\n  const { reset, watch } = methods;\n\n  const companyFormMethods = useForm();\n\n  const hasLoginError = useDisclosure();\n\n  const handleLoginClick = async () => {\n    if (email) {\n      try {\n        await AuthApis.switch(email);\n        (window as any).location = '/dashboard';\n      } catch (e: any) {\n        if (e.code === 404) {\n          hasLoginError.open();\n        }\n      }\n    }\n  };\n\n  const sendInvite = async (email: string) => {\n    setLoading(true);\n    setInviteEmail(watch('invite-email'));\n    await sendInvitation({ email });\n    reset();\n    setLoading(false);\n  };\n\n  const { handle: createCompany, data: createdCompany } = useHandler(\n    (data) => CompanyApis.create(data),\n    {\n      onError: (error: any) => {\n        toast.error(\n          Object.values(error?.details?.details ?? {})[0] ?? (error as any).details?.message,\n        );\n\n        return false;\n      },\n    },\n  );\n\n  const { onCopy } = useClipboard((createdCompany as any)?.token);\n\n  const handleCopyToken = () => {\n    onCopy();\n    toast.success('Token was copied to clipboard!');\n  };\n\n  return (\n    <div className=\"bg-white min-h-screen\">\n      <div className=\"h-[56px] bg-primary flex items-center px-8\">\n        <h1 className=\"text-white font-bold text-lg\">Gravity Labs Support & Invite Admin</h1>\n      </div>\n      <div className=\"p-16\">\n        <h3 className=\"font-bold text-[28px]\">Log In As</h3>\n        <p className=\"font-bold mt-6 text-sm\">Enter email for the user youâ€™re logging in as:</p>\n        <div className=\"flex items-center gap-6 mt-8\">\n          <Input\n            placeholder=\"email required*\"\n            type=\"email\"\n            className=\"w-[300px] bg-[#EDEDED] rounded-lg\"\n            value={email}\n            onChange={(e) => {\n              hasLoginError.close();\n              setEmail(e.target.value);\n            }}\n            error={hasLoginError.isOpen}\n          />\n          <Button\n            variant=\"solid\"\n            colorScheme=\"accent\"\n            className=\"rounded\"\n            onClick={handleLoginClick}\n          >\n            Log in\n          </Button>\n        </div>\n        {hasLoginError.isOpen && (\n          <p className=\"text-danger text-sm mt-1\">\n            The account you are trying to switch to does not exist\n          </p>\n        )}\n\n        <Divider className=\"my-12\" />\n\n        <h3 className=\"font-bold text-[28px]\">Invite</h3>\n        <p className=\"font-bold mt-6 text-sm\">Enter email for the user you want to invite</p>\n        <Form methods={methods} onSubmit={() => sendInvite(watch('invite-email'))}>\n          <div className=\"flex items-center gap-6 mt-8\">\n            <Form.Input\n              className=\"w-[300px] bg-[#EDEDED] rounded-lg\"\n              name=\"invite-email\"\n              type=\"email\"\n              required={true}\n              placeholder=\"email required*\"\n            />\n            <Button\n              type=\"submit\"\n              variant=\"solid\"\n              colorScheme=\"accent\"\n              className=\"rounded\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Sending...' : 'Invite'}\n            </Button>\n          </div>\n        </Form>\n\n        <Divider className=\"my-12\" />\n\n        <h3 className=\"font-bold text-[28px]\">New company</h3>\n        <Form\n          methods={companyFormMethods}\n          onSubmit={async (data: any) => {\n            await createCompany({ ...data, name: 'Admin' });\n            toast.success('Company was created!');\n          }}\n        >\n          <div className=\"flex gap-6\">\n            <div className=\"flex flex-col gap-6 mt-8 w-[300px] flex-shrink-0\">\n              <Form.Input\n                className=\"bg-[#EDEDED] rounded-lg\"\n                name=\"fullName\"\n                required={true}\n                placeholder=\"Admin name\"\n              />\n              <Form.Input\n                className=\"bg-[#EDEDED] rounded-lg\"\n                name=\"adminEmail\"\n                required={true}\n                type=\"email\"\n                placeholder=\"Admin email\"\n              />\n              <Form.Input\n                className=\"=bg-[#EDEDED] rounded-lg\"\n                name=\"domain\"\n                required={true}\n                placeholder=\"Company domain\"\n              />\n              <Button type=\"submit\" variant=\"solid\" colorScheme=\"accent\" className=\"rounded\">\n                Create\n              </Button>\n            </div>\n            {companyFormMethods.formState.isSubmitSuccessful && (\n              <div>\n                <div className=\"flex items-center gap-2\">\n                  <p className=\"font-semibold\">Token</p>\n                  <Tooltip\n                    trigger={\n                      <Button onClick={handleCopyToken}>\n                        <ClipboardCopyIcon width={16} />\n                      </Button>\n                    }\n                  >\n                    Copy to clipboard\n                  </Tooltip>\n                </div>\n                <p className=\"p-4 rounded border border-gray-400 break-all max-w-[500px] mt-2 h-full\">\n                  {(createdCompany as any)?.token}\n                </p>\n              </div>\n            )}\n          </div>\n        </Form>\n        {isSent && (\n          <div className=\"space-y-4 mt-[60px]\">\n            <p className=\"text-lg leading-5 font-semibold\">Invite was sent to: {inviteEmail}</p>\n            <p className=\"text-lg leading-5 font-semibold\">Invite link: {inviteLink}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nfunction ClipboardCopyIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(ClipboardCopyIcon);\nexport default ForwardRef;"],"names":["RestApis","create","payload","post","CompanyApis","AuthApis","Button","Divider","Form","Input","Tooltip","useDisclosure","useHandler","useInvite","useClipboard","ClipboardCopyIcon","useState","useForm","toast","SupportPage","sendInvitation","isSent","inviteLink","isLoading","setLoading","email","setEmail","inviteEmail","setInviteEmail","methods","mode","reset","watch","companyFormMethods","hasLoginError","handleLoginClick","switch","window","location","code","open","sendInvite","data","onError","error","Object","values","details","message","createCompany","handle","createdCompany","token","onCopy","handleCopyToken","success","e","close","target","value","isOpen","name","formState","isSubmitSuccessful"],"sourceRoot":""}